{% import common_file|default("default_c_binding_common.j2") as common -%}
{%- block copyright_boilerplate -%}{% endblock -%}
#pragma once
/* generated by rubigen, do not edit.
 *
 * parameters:
 *  defines: {% if pp_definitions is not none %}{{ pp_definitions|join(', ') }}{% else %}none{% endif %}
 *  force includes: {% if force_includes is not none %}{{ force_includes|join(', ') }}{% else %}none{% endif %}
 */

{% block includes -%}
#include "{{ input_file_basename }}"
{%- endblock %}

#ifdef __cplusplus
extern "C" {
#endif

{% if self.typedefs() %}/* typedefs */{% endif %}
{%- block typedefs %}
{%- for function in env.functions %}
{{ function.decl|typedef_from_decl(common.funcptr_type(function, ns))|c_from_typedef }};
{%- endfor %}
{%- endblock %}

/* functions struct */
{%- block funcstruct %}
typedef struct {{ ns }}_functions_t
{
{%- for function in env.functions %}
	{{ common.funcptr_type(function, ns) }} {{ common.structfunc(function) }};
{%- endfor %}
} {{ ns }}_functions;
{%- endblock %}

{% block api -%}
typedef void* (*PFN_rbg_get_sym)(void *user_arg, const char *name);
void {{ ns }}_load_functions({{ ns }}_functions *f, PFN_rbg_get_sym get_sym, void *user_arg);
{%- endblock %}

#ifdef __cplusplus
} /* extern "C" */
#endif

